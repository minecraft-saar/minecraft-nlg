interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation ref: de.up.ling.irtg.algebra.SetAlgebra
interpretation sem: de.up.ling.irtg.algebra.SubsetAlgebra

// a referent is always the location the current subtree refers to
// Terminalsymbole dÃ¼rfen nur in einer einzigen Regel auftreten

// Refers to the wall if all indefPPs also refer to the indefinite
// wall and nothing else.
// (size_1(?1)) -> all PPs refer to the same thing
// intersect_1 -> this thing is the indefwall


// NPs
////////////////////////////////////////////////////////////////////////
IndefNP! -> np(N) [-0.9]
  [string] *("a", ?1)
  [ref] ?1
  [sem] contains(?1, indef)

DefNP -> dnp(N)  [-0.9]
  [string] *("the", ?1)
  [ref] size_1(?1)
  [sem] not_contains(?1, indef)


// objects
////////////////////////////////////////////////////////////////////////
N -> obj(Obj) [-0.9]
  [string] ?1
  [ref] ?1
  [sem] ?1

Obj -> bridge [-0.9]
  [string] "bridge"
  [ref] bridge
  [sem] type

Obj -> wall [-0.9]
  [string] "wall"
  [ref] wall
  [sem] type

Obj -> staircase [-0.9]
  [string] "staircase"
  [ref] stairs
  [sem] type


Obj -> row [-0.9]
  [string] "row"
  [ref] row
  [sem] type

Obj -> railing [-0.9]
  [string] "railing"
  [ref] railing
  [sem] type

Obj -> block [-0.9]
  [string] "block"
  [ref] block
  [sem] type

Obj -> floor [-0.9]
  [string] "floor"
  [ref] floor
  [sem] type

// indefinite objects
// Only rules for indefinite objects should have terminal symbols starting with the letter i!

// Reason for implementing this: Definite and indefinite objects should be distinguishable.
// Nouns used by the rules DefNP and IndefNP! should therefore refer to different objects.
// This is taken care of by introducing the 'indef' feature in the [sem] interpretation which
// forces DefNP and IndefNP! rules to use different subtrees (i.e. IndefNP! uses a subtree generated
// with the indefinite rules, where iobjects are at the leaves of the tree).

Obj -> ibridge [-0.9]
  [string] "bridge"
  [ref] bridge
  [sem] type+indef

Obj -> iwall [-0.9]
  [string] "wall"
  [ref] wall
  [sem] type+indef

Obj -> istaircase [-0.9]
  [string] "staircase"
  [ref] stairs
  [sem] type+indef

Obj -> irow [-0.9]
  [string] "row"
  [ref] row
  [sem] type+indef

Obj -> irailing [-0.9]
  [string] "railing"
  [ref] railing
  [sem] type+indef

Obj -> iblock [-0.9]
  [string] "block"
  [ref] block
  [sem] type+indef

Obj -> ifloor [-0.9]
  [string] "floor"
  [ref] floor
  [sem] type+indef


// locations
////////////////////////////////////////////////////////////////////////

LocP -> top(DefNP) [-0.9]
  [string] *("on top of", ?1)
  [ref] project_1(intersect_2(top-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> topsameshape(DefNP) [-0.9]
  [string] *("on top of", ?1)
  [ref] project_1(intersect_2(top-of-same-shape1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> below(DefNP) [-0.9]
  [string] *("below of", ?1)
  [ref] project_2(intersect_1(top-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> left(DefNP) [-0.9]
  [string] *("to the left of", ?1)
  [ref] project_1(intersect_2(left-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> right(DefNP) [-0.9]
  [string] *("to the right of", ?1)
  [ref] project_2(intersect_1(left-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> front(DefNP) [-0.9]
  [string] *("in front of", ?1)
  [ref] project_1(intersect_2(in-front-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)
  
LocP -> behind(DefNP) [-0.9]
  [string] *("behind", ?1)
  [ref] project_2(intersect_1(in-front-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> nexttor(DefNP) [-0.9]
  [string] *("next to", ?1)
  [ref] project_2(intersect_2(left-of2, project_2(intersect_1(left-of1,?1))))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> nexttol(DefNP) [-0.9]
  [string] *("next to", ?1)
  [ref] project_1(intersect_1(left-of2, project_1(intersect_2(left-of1,?1))))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

// locations for BigBlock - Block relations
// for relations between Block and BigBlock objects we need to distinguish between the orientations
// the BigBlock Object can have. This is because saying "build a block to the left of the row" is
// fine if the row is oriented from left to right, but not if it is oriented away. Names of the rules
// therefore incorporate the orientation.
// To accurately check for the orientation in the [ref] interpretation of the rule we need to know
// whether ?1 or the target is the BigBlock Object (depending on this we need to intersect with the
// orientation-relation at different points). Names of the rules therefore contain 'block' if
// we insert a Block Object for ?1
// thus the rule "rightorientlrblock" is used to describe a left-to-right-oriented BigBlock object
// (this is the target) to the right of a block

//orientleftright

LocP -> leftorientlr(DefNP) [-2.9]
  [string] *("to the left of", ?1)
  [ref] project_1(intersect_2(left-of1-BigBlock-Block,intersect(orientleftright, ?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> leftorientlrblock(DefNP) [-0.9]
  [string] *("to the left of", ?1)
  [ref] intersect(orientleftright, project_1(intersect_2(left-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> rightorientlr(DefNP) [-0.9]
  [string] *("to the right of", ?1)
  [ref] project_2(intersect_1(left-of1-BigBlock-Block,intersect(orientleftright,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> rightorientlrblock(DefNP) [-0.9]
  [string] *("to the right of", ?1)
  [ref] intersect(orientleftright, project_2(intersect_1(left-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> frontorientlr(DefNP) [-0.9]
  [string] *("in front of", ?1)
  [ref] project_1(intersect_2(in-front-of1-BigBlock-Block,intersect(orientleftright,?1)))
  [sem] firstarg(y1+z1, ?1)

LocP -> frontorientlrblock(DefNP) [-0.9]
  [string] *("in front of", ?1)
  [ref] intersect(orientleftright, project_1(intersect_2(in-front-of1-BigBlock-Block,?1)))
  [sem] firstarg(y1+z1, ?1)

LocP -> behindorientlr(DefNP) [-0.9]
  [string] *("behind", ?1)
  [ref] project_2(intersect_1(in-front-of1-BigBlock-Block,intersect(orientleftright,?1)))
  [sem] firstarg(y1+z1, ?1)

LocP -> behindorientlrblock(DefNP) [-0.9]
  [string] *("behind", ?1)
  [ref] intersect(orientleftright, project_2(intersect_1(in-front-of1-BigBlock-Block,?1)))
  [sem] firstarg(y1+z1, ?1)

//orientaway

LocP -> leftorientaway(DefNP) [-0.9]
  [string] *("to the left of", ?1)
  [ref] project_1(intersect_2(left-of1-BigBlock-Block,intersect(orientaway, ?1)))
  [sem] firstarg(x1+y1, ?1)

LocP -> leftorientawayblock(DefNP) [-0.9]
  [string] *("to the left of", ?1)
  [ref] intersect(orientaway, project_1(intersect_2(left-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1, ?1)

LocP -> rightorientaway(DefNP) [-0.9]
  [string] *("to the right of", ?1)
  [ref] project_2(intersect_1(left-of1-BigBlock-Block,intersect(orientaway,?1)))
  [sem] firstarg(x1+y1, ?1)

LocP -> rightorientawayblock(DefNP) [-0.9]
  [string] *("to the right of", ?1)
  [ref] intersect(orientaway, project_2(intersect_1(left-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1, ?1)

LocP -> frontorientaway(DefNP) [-0.9]
  [string] *("in front of", ?1)
  [ref] project_1(intersect_2(in-front-of1-BigBlock-Block,intersect(orientaway,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> frontorientawayblock(DefNP) [-0.9]
  [string] *("in front of", ?1)
  [ref] intersect(orientaway, project_1(intersect_2(in-front-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> behindorientaway(DefNP) [-0.9]
  [string] *("behind", ?1)
  [ref] project_2(intersect_1(in-front-of1-BigBlock-Block,intersect(orientaway,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

LocP -> behindorientawayblock(DefNP) [-0.9]
  [string] *("behind", ?1)
  [ref] intersect(orientaway, project_2(intersect_1(in-front-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1+z1, ?1)

// add "x blocks" - distance relations

LocP -> twotop(DefNP) [-1.9]
  [string] *("two blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> twoabove(DefNP) [-2.9]
  [string] *("two blocks above", ?1)
  [ref] project_1(intersect_2(top-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> twoleft(DefNP) [-1.9]
  [string] *("two blocks left of", ?1)
  [ref] project_1(intersect_2(left-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> tworight(DefNP) [-1.9]
  [string] *("two blocks right of", ?1)
  [ref] project_2(intersect_1(left-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> twofront(DefNP) [-1.9]
  [string] *("two blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> twobehind(DefNP) [-1.9]
  [string] *("two blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> threetop(DefNP) [-2.9]
  [string] *("three blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> threeabove(DefNP) [-3.9]
  [string] *("three blocks above", ?1)
  [ref] project_1(intersect_2(top-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> threeleft(DefNP) [-2.9]
  [string] *("three blocks left of", ?1)
  [ref] project_1(intersect_2(left-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> threeright(DefNP) [-2.9]
  [string] *("three blocks right of", ?1)
  [ref] project_2(intersect_1(left-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> threefront(DefNP) [-2.9]
  [string] *("three blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> threebehind(DefNP) [-2.9]
  [string] *("three blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fourtop(DefNP) [-2.9]
  [string] *("four blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fourabove(DefNP) [-3.9]
  [string] *("four blocks above", ?1)
  [ref] project_1(intersect_2(top-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fourleft(DefNP) [-2.9]
  [string] *("four blocks left of", ?1)
  [ref] project_1(intersect_2(left-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fourright(DefNP) [-2.9]
  [string] *("four blocks right of", ?1)
  [ref] project_2(intersect_1(left-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fourfront(DefNP) [-2.9]
  [string] *("four blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fourbehind(DefNP) [-2.9]
  [string] *("four blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fivetop(DefNP) [-2.9]
  [string] *("five blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fiveabove(DefNP) [-3.9]
  [string] *("five blocks above", ?1)
  [ref] project_1(intersect_2(top-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fiveleft(DefNP) [-2.9]
  [string] *("five blocks left of", ?1)
  [ref] project_1(intersect_2(left-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fiveright(DefNP) [-2.9]
  [string] *("five blocks right of", ?1)
  [ref] project_2(intersect_1(left-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fivefront(DefNP) [-2.9]
  [string] *("five blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

LocP -> fivebehind(DefNP) [-2.9]
  [string] *("five blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+z2, ?1)

// between

// 4 rules for between are needed. First, we need to differentiate between blocks that are in a
// front-behind relationship and blocks that are in left-right relationship. Second, it shouldn't
// matter whether we say "between A and B" or "between B and A" therefore we need betweenlr and
// betweenrl (and betweenfb and betweenbf for front/back respectively)

LocP -> betweenlr(DefNP, DefNP) [-4.7]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(left-of1,?1)),project_1(intersect_2(left-of1,?2)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

LocP -> betweenfb(DefNP, DefNP) [-4.7]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(in-front-of1,?1)),project_1(intersect_2(in-front-of1,?2)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

LocP -> betweenrl(DefNP, DefNP) [4.7]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(left-of1,?2)),project_1(intersect_2(left-of1,?1)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

LocP -> betweenbf(DefNP, DefNP) [4.7]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(in-front-of1,?2)),project_1(intersect_2(in-front-of1,?1)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

//between for BigBlock-Block relations

LocP -> betweenlrBigBlock(DefNP, DefNP) [9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(left-of1-BigBlock-Block,?1)),project_1(intersect_2(left-of1-BigBlock-Block,?2)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

LocP -> betweenfbBigBlock(DefNP, DefNP) [-0.9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(in-front-of1-BigBlock-Block,?1)),project_1(intersect_2(in-front-of1-BigBlock-Block,?2)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

LocP -> betweenrlBigBlock(DefNP, DefNP) [9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(left-of1-BigBlock-Block,?2)),project_1(intersect_2(left-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

LocP -> betweenbfBigBlock(DefNP, DefNP) [-0.9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(in-front-of1-BigBlock-Block,?2)),project_1(intersect_2(in-front-of1-BigBlock-Block,?1)))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, firstarg(?1, ?2))

// Single addressable blocks of larger objects

// diff(?1, target): We cannot explain the location of a block
// using the target object we want to describe because the user
// does not know the shape of the target object yet.
// therefore, we remove the target object.

// front left/right and back left/right corner should be said for floor objects, while for walls
// which are oriented from left to right it should be upper and lower left/right corners. For walls
// which are oriented away it should be lower front/back and upper front/back corner.
// IMPORTANT: Rules for lower front/back / upper front/back are currently not implemented!

N -> frontleftcorner(DefNP) [-0.9]
  [string] *("front left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(from-diagonal1, intersect(floor, diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> backleftcorner(DefNP) [-0.9]
  [string] *("back left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(to-diagonal2, intersect(floor, diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> frontrightcorner(DefNP) [-0.9]
  [string] *("front right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(from-diagonal2, intersect(floor, diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> backrightcorner(DefNP) [-0.9]
  [string] *("back right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(to-diagonal1, intersect(floor, diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> upperrightcorner(DefNP) [-0.9]
  [string] *("upper right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(to-diagonal1, intersect(intersect(wall, orientleftright), diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)
// why do we specify all three coordinates?

N -> upperleftcorner(DefNP) [-0.9]
  [string] *("upper left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(to-diagonal2, intersect(intersect(wall, orientleftright), diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> lowerleftcorner(DefNP) [-0.9]
  [string] *("lower left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(from-diagonal1, intersect(intersect(wall, orientleftright), diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> lowerrightcorner(DefNP) [-0.9]
  [string] *("lower right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(from-diagonal2, intersect(intersect(wall, orientleftright), diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

// relations
////////////////////////////////////////////////////////////////////////

// BigBlock objects may be described by two blocks which are in a diagonal relationship to each other
// e.g. we can describe a wall by saying "build a wall from the blue block to the block on top of the
// yellow block" if the blue block and the block on top of the yellow block span a diagonal. There are
// two diagonals for walls and floors which we can use: diagonal1 and diagonal2
// for walls oriented from left to right:
//    diagonal 1 runs from bottom left to top right corner
//    diagonal 2 runs from bottom right corner to top left
// for walls oriented away:
//    diagonal 1 runs from bottom front to top back corner
//    diagonal 2 runs from bottom back corner to top front
// To make sure that only blocks from the same diagonal can be in a "from-to-relationship" the
// todiagonal1 rule can only take the Ndiag1 LH-symbol generated by the fromdiagonal1-rule (for
// diagonal2 the same holds


Ndiag1 -> fromdiagonal1(N, DefNP) [-0.9]
  [string] *(?1, *("from", ?2))
  [ref] intersect(project_1(intersect_2(from-diagonal1, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

Ndiag2 -> fromdiagonal2(N, DefNP) [-0.9]
  [string] *(?1, *("from", ?2))
  [ref] intersect(project_1(intersect_2(from-diagonal2, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

N -> todiagonal1(Ndiag1, DefNP) [-9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(to-diagonal1,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> todiagonal2(Ndiag2, DefNP) [-9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(to-diagonal2,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

// We want also to be able to use "to" without using "from" previously (e.g. in "build a row of length
// four to the red block", therefore we need also to-rules which do not only take symbols generate by
// from-rules as their arguments, these rules are called onlytodiagonal1 or onlytodiagonal2 respectively

N -> onlytodiagonal1(N, DefNP) [-9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(to-diagonal1,?2)), intersect(row, ?1))
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> onlytodiagonal2(N, DefNP) [-9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(to-diagonal2,?2)), intersect(row, ?1))
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

// it may be that the blocks spanning the diagonal are not adressable (because they are not colored
// or not the previous object, then we might say "from top of the xy block to ..." or
// "from .. to the top of the xy block". Therefore the relations topof-diagonal1 and topof-diagonal2
// are created. The rules fromtopofdiagonal1 and tobottomdiagonal1 (analogous for diagonal2) can be
// combined to create this instruction.

Ndiag2top -> fromtopofdiagonal2(N, DefNP) [-9]
  [string] *(?1, *("from the top of", ?2))
  [ref] intersect(project_1(intersect_2(topof-diagonal2, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

N -> tobottomdiagonal2(Ndiag2top, DefNP) [-9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(from-diagonal2,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

Ndiag1top -> fromtopofdiagonal1(N, DefNP) [-9]
  [string] *(?1, *("from the top of", ?2))
  [ref] intersect(project_1(intersect_2(topof-diagonal1, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

N -> tobottomdiagonal1(Ndiag1top, DefNP) [-9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(from-diagonal1,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> totopofdiagonal1(Ndiag1, DefNP) [-9]
   [string] *(?1, *("to the top of", ?2))
   [ref] intersect(project_1(intersect_2(topof-diagonal1,?2)), ?1)
   [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> totopofdiagonal2(Ndiag2, DefNP) [-9]
   [string] *(?1, *("to the top of", ?2))
   [ref] intersect(project_1(intersect_2(topof-diagonal2,?2)), ?1)
   [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

// As above, we want also to be able to use "to the top of" without using "from" previously (e.g. in "build a row of length
// four to the top of the red block", therefore we need also totopof-rules which do not only take symbols generate by
// from-rules as their arguments, these rules are called onlytotopofdiagonal1 or onlytotopofdiagonal2 respectively

N -> onlytotopofdiagonal1(N, DefNP) [-9]
   [string] *(?1, *("to the top of", ?2))
   [ref] intersect(project_1(intersect_2(topof-diagonal1,?2)), intersect(row, ?1))
   [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> onlytotopofdiagonal2(N, DefNP) [-9]
   [string] *(?1, *("to the top of", ?2))
   [ref] intersect(project_1(intersect_2(topof-diagonal2,?2)), intersect(row, ?1))
   [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

// rules to describe a wall not by diagonal, but by horizontal line plus height
N -> tohorizontalrr(Ndiag1, DefNP) [-0.9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(from-diagonal2,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y1+z2), ?2)

N -> tohorizontallr(Ndiag2, DefNP) [-0.9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(from-diagonal1,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y1+z2), ?2)

// we need extra rules rules to describe a floor on top of blocks and to describe railings as we
// need to combine "from the top of" and "to the top of", which needn't be done for walls because
// for them the diagonal lies in a vertical plane, so one block is most likely on the ground, for a
// floor the diagonals lie in a horizontal plane, so both reference points can be on top of other blocks

Ndiag1 -> topfromdiagonal1(N, DefNP) [-0.9]
  [string] *(?1, *("from the top of", ?2))
  [ref] intersect(project_1(intersect_2(topof-from-diagonal1, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

Ndiag2 -> topfromdiagonal2(N, DefNP) [-0.9]
  [string] *(?1, *("from the top of", ?2))
  [ref] intersect(project_1(intersect_2(topof-from-diagonal2, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

N -> toptodiagonal1(Ndiag1, DefNP) [-9]
  [string] *(?1, *("to the top of", ?2))
  [ref] intersect(project_1(intersect_2(topof-to-diagonal1,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> toptodiagonal2(Ndiag2, DefNP) [-9]
  [string] *(?1, *("to the top of", ?2))
  [ref] intersect(project_1(intersect_2(topof-to-diagonal2,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

// on the other side of the bridge
N -> othersideof(N, DefNP) [-0.9]
  [string] *(?1, *("on the other side of", ?2))
  [ref] intersect(?1, project_1(intersect_3(intersect_2(otherside, ?2), it)))
  [sem] firstarg(eunion(?1, x1+y1+z1+x2+y2+z2), ?2)

N -> otherside(N) [-11]
  [string] *(?1, "on the other side")
  [ref] intersect(?1, size_1(project_1(intersect_3(otherside, it))))
  [sem] eunion(?1, x1+y1+z1+x2+y2+z2)

// Use a location as additional description
N -> loc(N,LocP) [-0.9]
  [string] *(?1, ?2)
  [ref] intersect(?1,?2)
  [sem] eunion(?1, ?2)

N -> height2(N) [-0.9]
  [string] *(?1, "of height two")
  [ref] intersect(height2, ?1)
  [sem] eunion(height, ?1)

N -> high2(N) [-0.9]
  [string] *(?1, "which is two blocks high")
  [ref] intersect(height2, ?1)
  [sem] eunion(height, ?1)

N -> height3(N) [-0.9]
  [string] *(?1, "of height three")
  [ref] intersect(height3, ?1)
  [sem] eunion(height, ?1)

N -> high3(N) [-1.9]
  [string] *(?1, "which is three blocks high")
  [ref] intersect(height3, ?1)
  [sem] eunion(height, ?1)

N -> height4(N) [-0.9]
  [string] *(?1, "of height four")
  [ref] intersect(height4, ?1)
  [sem] eunion(height, ?1)

N -> high4(N) [-1.9]
  [string] *(?1, "which is four blocks high")
  [ref] intersect(height4, ?1)
  [sem] eunion(height, ?1)

N -> length2(N) [-0.9]
  [string] *(?1, "of length two")
  [ref] intersect(length2, ?1)
  [sem] eunion(length, ?1)

N -> long2(N) [-1.9]
  [string] *(?1, "which is two blocks long")
  [ref] intersect(length2, ?1)
  [sem] eunion(length, ?1)

N -> length3(N) [-0.9]
  [string] *(?1, "of length three")
  [ref] intersect(length3, ?1)
  [sem] eunion(length, ?1)

N -> long3(N) [-1.9]
  [string] *(?1, "which is three blocks long")
  [ref] intersect(length3, ?1)
  [sem] eunion(length, ?1)

N -> length4(N) [-0.9]
  [string] *(?1, "of length four")
  [ref] intersect(length4, ?1)
  [sem] eunion(length, ?1)

N -> long4(N) [-1.9]
  [string] *(?1, "which is four blocks long")
  [ref] intersect(length4, ?1)
  [sem] eunion(length, ?1)

N -> toright(N) [-0.9]
  [string] *(?1, "to the right")
  [ref] intersect(orientleftright, ?1)
  [sem] eunion(orientation, ?1)

N -> orientaway(N) [-0.9]
  [string] *(?1, "away from you")
  [ref] intersect(orientaway, ?1)
  [sem] eunion(orientation, ?1)

N -> fromlefttoright(N) [-1.9]
  [string] *(?1, "from left to right")
  [ref] intersect(orientleftright, ?1)
  [sem] eunion(orientation, ?1)

// adjectives
////////////////////////////////////////////////////////////////////////
Obj -> orange(Obj) [-0.9]
  [string] *("orange", ?1)
  [ref] intersect(orange, ?1)
  [sem] dunion(color, ?1)

Obj -> yellow(Obj) [-0.9]
  [string] *("yellow", ?1)
  [ref] intersect(yellow, ?1)
  [sem] dunion(color, ?1)

Obj -> blue(Obj) [-0.9]
  [string] *("blue", ?1)
  [ref] intersect(blue, ?1)
  [sem] dunion(color, ?1)

Obj -> green(Obj) [-0.9]
  [string] *("green", ?1)
  [ref] intersect(green, ?1)
  [sem] dunion(color, ?1)

Obj -> red(Obj) [-0.9]
  [string] *("red", ?1)
  [ref] intersect(red, ?1)
  [sem] dunion(color, ?1)

Obj -> redw(Obj) [-0.9]
  [string] *("red", ?1)
  [ref] intersect(red_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> bluew(Obj) [-0.9]
  [string] *("blue", ?1)
  [ref] intersect(blue_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> yelloww(Obj) [-0.9]
  [string] *("yellow", ?1)
  [ref] intersect(yellow_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> blackw(Obj) [-0.9]
  [string] *("black", ?1)
  [ref] intersect(black_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> orangew(Obj) [-0.9]
  [string] *("orange", ?1)
  [ref] intersect(orange_wool, ?1)
  [sem] dunion(color, ?1)


// TODO: what is the sem interpretation for this??
// probably not important because this rule can only be used
// to describe definite objects and the sem does not propagate to
// indefinite descriptions
Obj -> prev(Obj) [-0.9]
  [string] *("previous", ?1)
  [ref] intersect(it, ?1)
  [sem] dunion(x1+y1+z1+color, ?1)

/*
IndefPP -> indefHeight(IndefPP) [-0.9]
  [string] *("of height three", ?1)
  [ref] intersect(heightthree, ?1)
  [sem] union(height, ?1)

IndefPP -> widthThree(IndefPP) [-0.9]
  [string] *("of length three", ?1)
  [ref] intersect(widththree, ?1)
  [sem] union(width, ?1)

IndefPP -> depthThree(IndefPP) [-0.9]
  [string] *("of length three", ?1)
  [ref] intersect(depththree, ?1)
  [sem] union(depth, ?1)


IndefPP -> indefSameShapeIt(IndefPP) [-0.9]
  [string] *("of the same shape as the previous one", ?1)
  [ref] intersect(project_1(intersect_2(sameshape, it)), ?1)
  [sem] union(shape, ?1)
*/
