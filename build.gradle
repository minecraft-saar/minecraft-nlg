plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    // id 'checkstyle'

    // enables automatic version numbers from git tags
    // and provides additional gradle tasks to create releases (optional)
    id 'pl.allegro.tech.build.axion-release' version '1.10.1'
    id 'maven-publish'
}
group 'com.github.minecraft-saar'
description 'minecraft-nlg'

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
  }
}

// This defines releases as revisions
// that have a tag of the form "release-X.Y.Z"
scmVersion {
    ignoreUncommittedChanges = false
    tag {
        prefix = 'release'
    }
}
version = scmVersion.version

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    // We need this repository because alto uses a MacOS window menu
    // library that seems to be not packaged but is a transitive dependency
    // of alto.
    //maven { url "http://akci.coli.uni-saarland.de/artifactory/external"
    //        allowInsecureProtocol = true }
    maven {url 'https://raw.github.com/coli-saar/alto/repository/'}
}

dependencies {
    api "com.github.coli-saar:basics:9b78dde236d924e696671b586d7e6eb09309f253"
    testImplementation('org.junit.jupiter:junit-jupiter:5.7.2')
    implementation (group: "com.github.coli-saar", name:"alto", version:"c252ee0e9336bdb113ca0dcd4ba4c91c6e6a3469")
    implementation 'info.picocli:picocli:3.9.3'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.eclipse.collections:eclipse-collections-api:9.2.0'
    implementation 'org.eclipse.collections:eclipse-collections:9.2.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.15.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// checkstyle {
//     toolVersion "8.19"
// }

mainClassName = 'de.saar.coli.minecraft.Main'


// Define two additional tasks that build a sources jar and a javadoc
// jar.  Both are published at the maven repository.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
	failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// define the github package registry as the maven repository we push our software to.
// this happens automatically thanks to the github actions settings.
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/minecraft-saar/minecraft-nlg")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

// Local Variables:
// groovy-indent-offset: 4
// indent-tabs-mode: nil
// End:
